// lib.rs - main library
//
// cnfgen - Generate the DIMACS CNF formulae from operations
// Copyright (C) 2022  Mateusz Szpakowski
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

#![cfg_attr(docsrs, feature(doc_cfg))]
//! The library to generate CNF (Conjuctive Normal Form) formulaes.
//!
//! This library provides simple CNF writer, structures to create boolean formulae from
//! boolean expressions and integer expressions. The module `writer` provides
//! basic types, traits to handle clauses and literals, simple the CNF writer to write
//! same CNF formulaes. The `boolexpr` module provides structure to construct boolean
//! expressions. The `intexpr` and `dynintexpr` modules provides structure and traits to
//! construct integer expressions.
//!
//! Same construction of expressions can be done in natural way by using operators or
//! methods. The object called `ExprCreator` holds all expressions. The main structures
//! that allow construct expressions are expression nodes: `BoolExprNode`, `IntExprNode`
//! and `DynIntExprNode`. BoolExprNode allow to construct boolean expressions.
//! `IntExprNode` and `DynIntExprNode` allow to construct integer expressions or multiple
//! bit expressions.
//!
//! Samples of usage of these modules can be found in documentation of these modules.
//!
//! Typical usage of this library is: construction boolean expression and write it by using
//! method `write` from an expression object. The `writer` module can be used to write
//! 'raw' CNF formulaes that can be generated by other software.

pub mod writer;
pub use writer::{Literal, VarLit};

pub mod boolexpr;
pub mod boolexpr_creator;

pub mod dynintexpr;
mod int_utils;
pub mod intexpr;
mod intmacros;

pub use generic_array;
